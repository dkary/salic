% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dashboard.R
\name{est_part}
\alias{est_part}
\alias{est_recruit}
\title{Estimate participants by year from license history}
\usage{
est_part(history, segment = "tot", test_threshold = 20,
  show_test_stat = FALSE, suppress_warning = FALSE,
  outvar = "participants")

est_recruit(history, segment = "tot", test_threshold = 35,
  show_test_stat = FALSE, suppress_warning = FALSE,
  outvar = "recruits")
}
\arguments{
\item{history}{data frame: input license history table}

\item{segment}{character: defaults to "tot", which indicates no segmentation.
Alternatively specifiy other license history variables ("res", "sex", etc.)}

\item{test_threshold}{numeric: threshold in whole number percentage points 
for pct change per year. A warning will be printed if the absolute value
of the change for any year exceeds the threshold.}

\item{show_test_stat}{logical: If TRUE, the output table will include
a variable holding the test statistic for each row.}

\item{suppress_warning}{logical: If TRUE, no test warning will be displayed 
(even if threshold is exceeded). Test statistics can still be included by 
setting show_test_stat = TRUE.}

\item{outvar}{character: name of variable that stores metric}
}
\value{
Returns a data frame with 3 variables (segment, "year", outvar), and
optionally with 2 extra variables ("change", "pct_change") if show_test_stat = TRUE
}
\description{
This function requires a correctly formated history table (see \code{\link{history}}).
It produces a simple count of records per year, optionally by segment, 
& runs a validation test: pct change per year.
}
\examples{
library(dplyr)
data(history)
history <- history \%>\%
    label_categories() \%>\%
    recode_agecat() \%>\%
    filter(!agecat \%in\% c("0-17", "65+"))
    
# participants
est_part(history)

# by segment
est_part(history, "agecat")
est_part(history, "agecat", test_threshold = 15) # produce a warning

# new recruits
history_new <- filter(history, !is.na(R3), R3 == "Recruit")
est_recruit(history_new)

# apply over multiple segments
segs <- c("tot", "res", "sex", "agecat")
sapply(segs, function(x) est_part(history, x), simplify = FALSE)

# specify test thesholds by segment
tests <- c(tot = 20, res = 45, sex = 30, agecat = 40)
part <- sapply(segs, function(x) est_part(history, x, tests[x]), simplify = FALSE)
}
\seealso{
Other dashboard functions: \code{\link{check_threshold}},
  \code{\link{est_churn}}, \code{\link{format_result}},
  \code{\link{scaleup_part}}
}
\concept{dashboard functions}
